"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram‚Äë–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–∞–º.

–†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞:
- WEBHOOK (Render Web Service): –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL.
- POLLING (–ª–æ–∫–∞–ª—å–Ω–æ): –µ—Å–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω.

–ö–æ–º–∞–Ω–¥—ã:
  /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  /my    ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã
  /export (–∞–¥–º–∏–Ω), /draw (–∞–¥–º–∏–Ω), /stats (–∞–¥–º–∏–Ω)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: —Å–º. requirements.txt
"""

import os
import asyncio
import csv
import datetime
import logging
import random
from io import StringIO

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand, BufferedInputFile

from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import aiosqlite
import config

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger(__name__)

# -------------------- –ë–û–¢/DP --------------------
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# -------------------- –ö–û–ù–§–ò–ì/–ë–î --------------------
DB_NAME = getattr(config, "DB_NAME", os.getenv("DB_NAME", "participants.db"))

# -------------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• --------------------
async def init_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É entries, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                code TEXT NOT NULL,
                entry_number INTEGER NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")

# -------------------- –ö–û–ú–ê–ù–î–´ –í –ú–ï–ù–Æ --------------------
async def set_bot_commands() -> None:
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        BotCommand(command="my", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã"),
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ (–∏—Ö –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å –∏–∑ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∏—Ç—å CSV (–∞–¥–º–∏–Ω)"),
        BotCommand(command="draw", description="–†–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(commands)

# -------------------- –õ–û–ì–ò–ö–ê –†–û–ó–´–ì–†–´–®–ê --------------------
async def register_entry(user_id: int, username: str | None, first_name: str | None, code: str) -> tuple[int, bool]:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥. –í–µ—Ä–Ω—ë—Ç (–Ω–æ–º–µ—Ä, is_new)."""
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT entry_number FROM entries WHERE user_id = ? AND code = ?",
            (user_id, code),
        )
        row = await cur.fetchone()
        if row:
            return row[0], False

        cur = await db.execute("SELECT MAX(entry_number) FROM entries")
        result = await cur.fetchone()
        max_number = result[0] or 0
        new_number = max_number + 1

        created_at = datetime.datetime.now().isoformat()
        await db.execute(
            "INSERT INTO entries (user_id, username, first_name, code, entry_number, created_at) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", code, new_number, created_at),
        )
        await db.commit()
        return new_number, True

async def get_user_entries(user_id: int) -> list[tuple[str, int]]:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT code, entry_number FROM entries WHERE user_id = ? ORDER BY created_at",
            (user_id,),
        )
        rows = await cur.fetchall()
    return [(row[0], row[1]) for row in rows]

async def export_csv() -> bytes:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT user_id, username, code, entry_number FROM entries ORDER BY id"
        )
        rows = await cur.fetchall()
    buff = StringIO()
    writer = csv.writer(buff)
    writer.writerow(["user_id", "username", "code", "entry_number"])
    for r in rows:
        writer.writerow(r)
    return buff.getvalue().encode("utf-8")

async def draw_winner() -> dict[str, str] | None:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT user_id, username, first_name, code, entry_number FROM entries"
        )
        rows = await cur.fetchall()
    if not rows:
        return None
    winner = random.choice(rows)
    return {
        "user_id": str(winner[0]),
        "username": winner[1] or "",
        "first_name": winner[2] or "",
        "code": winner[3],
        "entry_number": str(winner[4]),
    }

async def get_stats() -> dict[str, int]:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT COUNT(*) FROM entries")
        total_entries = (await cur.fetchone())[0]
        cur = await db.execute("SELECT COUNT(DISTINCT user_id) FROM entries")
        unique_users = (await cur.fetchone())[0]
        cur = await db.execute("SELECT COUNT(DISTINCT code) FROM entries")
        unique_codes = (await cur.fetchone())[0]
    return {"total_entries": total_entries, "unique_users": unique_users, "unique_codes": unique_codes}

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name} üëã!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n"
        "–ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã –∏ –Ω–æ–º–µ—Ä–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /my."
    )
    await message.answer(text)

@dp.message(Command("my"))
async def cmd_my(message: types.Message) -> None:
    entries = await get_user_entries(message.from_user.id)
    if not entries:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤.")
        return
    lines = ["–í–∞—à–∏ –∫–æ–¥—ã:"]
    for code, number in entries:
        lines.append(f"‚Ññ{number} ‚Äî {code}")
    await message.answer("\n".join(lines))

@dp.message(Command("export"))
async def cmd_export(message: types.Message) -> None:
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    csv_bytes = await export_csv()
    file = BufferedInputFile(csv_bytes, filename="participants.csv")
    await message.answer_document(file, caption="CSV‚Äë—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

@dp.message(Command("draw"))
async def cmd_draw(message: types.Message) -> None:
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    winner = await draw_winner()
    if not winner:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return
    username_part = f"@{winner['username']}" if winner['username'] else f"user_id={winner['user_id']}"
    response = (
        f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['first_name']} {username_part}\n"
        f"–ö–æ–¥: {winner['code']}\n"
        f"–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ‚Ññ{winner['entry_number']}\n"
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
    )
    await message.answer(response)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message) -> None:
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    stats = await get_stats()
    response = (
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_entries']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {stats['unique_codes']}"
    )
    await message.answer(response)

@dp.message()
async def handle_code(message: types.Message) -> None:
    if not message.text:
        return
    code_text = message.text.strip()
    if not code_text or code_text.startswith("/"):
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    code = code_text.lower()
    valid_codes_lower = [c.lower() for c in config.VALID_CODES]
    if code not in valid_codes_lower:
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    entry_number, is_new = await register_entry(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        code=code,
    )
    if is_new:
        await message.answer(f"–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{entry_number} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
    else:
        await message.answer(f"–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ —Ç–æ–±–æ–π –∫–∞–∫ ‚Ññ{entry_number}")

# -------------------- –ó–ê–ü–£–°–ö: WEBHOOK –∏–ª–∏ POLLING --------------------
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä.: https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")
PORT = int(os.getenv("PORT", "10000"))  # Render –æ—Ç–¥–∞—ë—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT

async def _on_startup(app: web.Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–æ–º –∞–ø–¥–µ–π—Ç–æ–≤ (webhook)."""
    await init_db()
    await set_bot_commands()
    if not WEBHOOK_URL:
        raise RuntimeError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π https‚ÄëURL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)

async def _on_shutdown(app: web.Application):
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    try:
        await bot.delete_webhook()
        logger.info("Webhook —Å–Ω—è—Ç.")
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –≤–µ–±—Ö—É–∫–∞: %s", e)

def create_app() -> web.Application:
    """–°–æ–∑–¥–∞—ë—Ç aiohttp‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—ë–º–∞ webhook –æ—Ç Telegram."""
    app = web.Application()

    # Health‚Äë—á–µ–∫ –¥–ª—è Render
    async def health(_):
        return web.Response(text="ok")
    app.router.add_get("/health", health)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–æ–≤ Telegram
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET)
    handler.register(app, path=WEBHOOK_PATH)

    setup_application(app, on_startup=[_on_startup], on_shutdown=[_on_shutdown])
    return app

async def _run_polling():
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling (–±–µ–∑ –≤–µ–±—Ö—É–∫–∞)."""
    await init_db()
    await set_bot_commands()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling). –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if WEBHOOK_URL:
        # WEBHOOK‚Äë—Ä–µ–∂–∏–º (Render Web Service)
        logger.info("–°—Ç–∞—Ä—Ç –≤ —Ä–µ–∂–∏–º–µ WEBHOOK –Ω–∞ –ø–æ—Ä—Ç—É %s", PORT)
        web.run_app(create_app(), host="0.0.0.0", port=PORT)
    else:
        # POLLING‚Äë—Ä–µ–∂–∏–º (–ª–æ–∫–∞–ª—å–Ω–æ)
        try:
            asyncio.run(_run_polling())
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
