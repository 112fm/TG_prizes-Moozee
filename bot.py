"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram‚Äë–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–∞–º.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–æ—Ç –Ω–∞ –±–∞–∑–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram (–≤–µ—Ä—Å–∏—è 3.22.0).
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞. –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥
–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–¥–æ–≤ (—Å–º. config.VALID_CODES), –±–æ—Ç
—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite) –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —ç—Ç–æ–º—É
—É—á–∞—Å—Ç–Ω–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–≤–æ–¥–µ —É–∂–µ —É—á—Ç—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–≥—Ä—É–∑–∏—Ç—å
—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV, –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
config.py (BOT_TOKEN, ADMIN_ID –∏ —Å–ø–∏—Å–æ–∫ VALID_CODES).

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:

    python bot.py

–§–∞–π–ª requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
"""

import asyncio
import csv
import datetime
import logging
import random
from io import StringIO

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand, BufferedInputFile

import aiosqlite

import config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º—è —Ñ–∞–π–ª–∞ –±–µ—Ä—ë–º –∏–∑ config.DB_NAME)
DB_NAME = config.DB_NAME


async def init_db() -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É entries, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã:
      - id: –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á (autoincrement)
      - user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
      - username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username) –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
      - first_name: –∏–º—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
      - code: –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
      - entry_number: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
      - created_at: –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ (ISO‚Äë—Ñ–æ—Ä–º–∞—Ç)
    """
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                code TEXT NOT NULL,
                entry_number INTEGER NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")


async def set_bot_commands() -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ Telegram –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        BotCommand(command="my", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã"),
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö
    # (Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ ID)
    admin_commands = [
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∏—Ç—å CSV (–∞–¥–º–∏–Ω)"),
        BotCommand(command="draw", description="–†–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(commands + admin_commands)


async def register_entry(user_id: int, username: str | None, first_name: str | None, code: str) -> tuple[int, bool]:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (entry_number, is_new), –≥–¥–µ is_new=True,
    –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –∏ False, –µ—Å–ª–∏ –∫–æ–¥ —É–∂–µ –±—ã–ª —É—á—Ç—ë–Ω.

    –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º user_id –∏ –∫–æ–¥–æ–º
        cursor = await db.execute(
            "SELECT entry_number FROM entries WHERE user_id = ? AND code = ?",
            (user_id, code),
        )
        row = await cursor.fetchone()
        if row:
            return row[0], False

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
        cursor = await db.execute("SELECT MAX(entry_number) FROM entries")
        result = await cursor.fetchone()
        max_number = result[0] or 0
        new_number = max_number + 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        created_at = datetime.datetime.now().isoformat()
        await db.execute(
            "INSERT INTO entries (user_id, username, first_name, code, entry_number, created_at) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", code, new_number, created_at),
        )
        await db.commit()
        return new_number, True


async def get_user_entries(user_id: int) -> list[tuple[str, int]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (code, entry_number) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT code, entry_number FROM entries WHERE user_id = ? ORDER BY created_at",
            (user_id,),
        )
        rows = await cursor.fetchall()
    return [(row[0], row[1]) for row in rows]


async def export_csv() -> bytes:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç CSV‚Äë—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤."""
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT user_id, username, code, entry_number FROM entries ORDER BY id"
        )
        rows = await cursor.fetchall()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±—É—Ñ–µ—Ä
    buffer = StringIO()
    writer = csv.writer(buffer)
    writer.writerow(["user_id", "username", "code", "entry_number"])
    for row in rows:
        writer.writerow(row)
    return buffer.getvalue().encode("utf-8")


async def draw_winner() -> dict[str, str] | None:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ first_name, username, user_id, code,
    entry_number –∏–ª–∏ None, –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç.
    """
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT user_id, username, first_name, code, entry_number FROM entries"
        )
        rows = await cursor.fetchall()
    if not rows:
        return None
    winner = random.choice(rows)
    return {
        "user_id": str(winner[0]),
        "username": winner[1] or "", 
        "first_name": winner[2] or "", 
        "code": winner[3],
        "entry_number": str(winner[4]),
    }


async def get_stats() -> dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–¥–æ–≤."""
    async with aiosqlite.connect(DB_NAME) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (—É—á–∞—Å—Ç–∏–π)
        cursor = await db.execute("SELECT COUNT(*) FROM entries")
        total_entries = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await db.execute("SELECT COUNT(DISTINCT user_id) FROM entries")
        unique_users = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
        cursor = await db.execute("SELECT COUNT(DISTINCT code) FROM entries")
        unique_codes = (await cursor.fetchone())[0]

    return {
        "total_entries": total_entries,
        "unique_users": unique_users,
        "unique_codes": unique_codes,
    }


@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—ë—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
    first_name = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
    f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã!\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n"
    "–ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n"
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã –∏ –Ω–æ–º–µ—Ä–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /my."
)
    await message.answer(text)


@dp.message(Command("my"))
async def cmd_my(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏–º –∫–æ–¥–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤."""
    entries = await get_user_entries(message.from_user.id)
    if not entries:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤.")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –∏ –Ω–æ–º–µ—Ä–æ–≤
    lines = ["–í–∞—à–∏ –∫–æ–¥—ã:"]
    for code, number in entries:
        lines.append(f"‚Ññ{number} ‚Äî {code}")
    await message.answer("\n".join(lines))


@dp.message(Command("export"))
async def cmd_export(message: types.Message) -> None:
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç CSV —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    csv_bytes = await export_csv()
    file = BufferedInputFile(csv_bytes, filename="participants.csv")
    await message.answer_document(file, caption="CSV‚Äë—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


@dp.message(Command("draw"))
async def cmd_draw(message: types.Message) -> None:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    winner = await draw_winner()
    if not winner:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return
    username_part = f"@{winner['username']}" if winner['username'] else f"user_id={winner['user_id']}"
    response = (
        f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['first_name']} {username_part}\n"
        f"–ö–æ–¥: {winner['code']}\n"
        f"–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ‚Ññ{winner['entry_number']}\n"
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
    )
    await message.answer(response)


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."""
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    stats = await get_stats()
    response = (
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_entries']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {stats['unique_codes']}"
    )
    await message.answer(response)


@dp.message()
async def handle_code(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –æ–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞
    –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ
    –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –µ–≥–æ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ï—Å–ª–∏ –∫–æ–¥
    –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    code = message.text.strip().lower()
    if not code:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
    if code.startswith("/"):
        # –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
    valid_codes_lower = [c.lower() for c in config.VALID_CODES]
    if code not in valid_codes_lower:
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    entry_number, is_new = await register_entry(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        code=code,
    )
    if is_new:
        await message.answer(f"–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{entry_number} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
    else:
        await message.answer(f"–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ —Ç–æ–±–æ–π –∫–∞–∫ ‚Ññ{entry_number}")


async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î, –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling."""
    await init_db()
    await set_bot_commands()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")