"""
–ë–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. (Supabase/Postgres)
"""
from __future__ import annotations

import os
import asyncio
import datetime
import logging
from typing import Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BotCommand, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiohttp import web
from aiogram.webhook.aiohttp_server import setup_application  # –±–µ–∑ SimpleRequestHandler

import config
import db  # –Ω–∞—à –Ω–æ–≤—ã–π —Å–ª–æ–π –ë–î

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
logger = logging.getLogger(__name__)

# ---------- –ë–û–¢/DP ----------
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# ---------- –ö–û–ù–§–ò–ì ----------
PART_LEN = config.PARTICIPANT_CODE_LEN
ALPHABET = config.PARTICIPANT_CODE_ALPHABET

WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")
PORT = int(os.getenv("PORT", "10000"))

# ---------- –ö–û–ú–ê–ù–î–´ –ú–ï–ù–Æ ----------
async def set_bot_commands() -> None:
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        BotCommand(command="my", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã"),
        BotCommand(command="settings", description="–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∏—Ç—å CSV (–∞–¥–º–∏–Ω)"),
        BotCommand(command="draw", description="–†–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand(command="broadcast_video", description="–†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–æ –Ω–æ–≤—ã–π –≤—ã–ø—É—Å–∫ (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(commands)

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def is_admin(user_id: int) -> bool:
    return user_id in set(getattr(config, "ADMIN_IDS", []) or [])

def build_settings_kb(prefs: dict) -> types.InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    def row(label: str, field: str, val: bool):
        icon = "‚úÖ" if val else "‚ùå"
        b.button(text=f"{label}: {icon}", callback_data=f"toggle:{field}")
    row("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞", "notify_results", prefs.get("notify_results", True))
    row("–ù–æ–≤—ã–µ –≤—ã–ø—É—Å–∫–∏", "notify_new_video", prefs.get("notify_new_video", True))
    row("–°—Ç—Ä–∏–º—ã", "notify_streams", prefs.get("notify_streams", True))
    b.adjust(1)
    return b.as_markup()

async def broadcast_to(kind: str, text: str) -> int:
    """
    –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ c –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏.
    kind in {'video','results','streams'}
    """
    user_ids = await db.list_subscribers_for(kind)
    sent = 0
    batch = 20
    for i in range(0, len(user_ids), batch):
        chunk = user_ids[i:i+batch]
        tasks = []
        for uid in chunk:
            tasks.append(bot.send_message(uid, text))
        results = await asyncio.gather(*tasks, return_exceptions=True)
        sent += sum(1 for r in results if not isinstance(r, Exception))
        await asyncio.sleep(1)  # –Ω–µ –∞–≥—Ä–∏–º –¢–µ–ª–µ–≥—Ä–∞–º
    return sent

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    pcode = await db.ensure_user(
        message.from_user.id, message.from_user.username, message.from_user.first_name,
        PART_LEN, ALPHABET
    )
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–¥—Ä—É–≥'} üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–¥–æ 3), —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø—Ä–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n\n"
        f"–¢–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: `{pcode}`\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã: /my\n"
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /settings"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("my"))
async def cmd_my(message: types.Message) -> None:
    pcode, entries = await db.get_user_entries(message.from_user.id)
    if not entries:
        await message.answer(f"–¢–≤–æ–π ID: `{pcode}`\n–¢—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞.", parse_mode="Markdown")
        return
    lines = [f"–¢–≤–æ–π ID: `{pcode}`", "–¢–≤–æ–∏ –∫–æ–¥—ã:"]
    for code, number in entries:
        lines.append(f"‚Ññ{number} ‚Äî {code}")
    await message.answer("\n".join(lines), parse_mode="Markdown")

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message) -> None:
    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
    await db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                         PART_LEN, ALPHABET)
    prefs = await db.get_prefs(message.from_user.id)
    await message.answer("–ß—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å?", reply_markup=build_settings_kb(prefs))

@dp.callback_query(F.data.startswith("toggle:"))
async def cb_toggle_pref(cq: types.CallbackQuery):
    field = cq.data.split(":", 1)[1]
    prefs = await db.toggle_pref(cq.from_user.id, field)
    await cq.message.edit_reply_markup(reply_markup=build_settings_kb(prefs))
    await cq.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

@dp.message(Command("export"))
async def cmd_export(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    csv_bytes = await db.export_csv()
    file = BufferedInputFile(csv_bytes, filename="participants.csv")
    await message.answer_document(file, caption="CSV —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

@dp.message(Command("draw"))
async def cmd_draw(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    winner = await db.draw_weighted_winner()
    if not winner:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return

    uname = f"@{winner['username']}" if winner["username"] else f"user_id={winner['user_id']}"
    codes_list = ", ".join(winner["codes"]) if winner["codes"] else "‚Äî"
    text = (
        "üéâ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞!*\n"
        f"–ò–≥—Ä–æ–∫: *{winner['first_name']}* ({uname})\n"
        f"ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: `{winner['participant_code']}`\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: *{winner['codes_count']}* (–≤–µ—Å –≤ –∂–µ—Ä–µ–±—å—ë–≤–∫–µ)\n"
        f"–ö–æ–¥—ã: {codes_list}"
    )
    await message.answer(text, parse_mode="Markdown")

    if getattr(config, "GROUP_CHAT_ID", None):
        try:
            await bot.send_message(config.GROUP_CHAT_ID, text, parse_mode="Markdown")
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ –≥—Ä—É–ø–ø—É: %s", e)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message) -> None:
    # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ CSV –º—ã —É–∂–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å; –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–Ω–µ—Å—ë–º –ø–æ–∑–∂–µ
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ /export (CSV). –û—Ç–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ.")

@dp.message(Command("broadcast_video"))
async def cmd_broadcast_video(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # –§–æ—Ä–º–∞—Ç: /broadcast_video <—Å—Å—ã–ª–∫–∞> <—Ç–µ–∫—Å—Ç...>
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer(
            "–§–æ—Ä–º–∞—Ç:\n/broadcast_video <—Å—Å—ã–ª–∫–∞> <—Ç–µ–∫—Å—Ç>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/broadcast_video https://youtu.be/abcde –ù–æ–≤—ã–π –≤—ã–ø—É—Å–∫ –Ω–∞ –∫–∞–Ω–∞–ª–µ!"
        )
        return
    url = parts[1]
    text = parts[2]
    full = f"üé¨ –ù–æ–≤—ã–π –≤—ã–ø—É—Å–∫!\n{text}\n{url}"
    sent = await broadcast_to("video", full)
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ–¥–ø–∏—Å–∫–∞ ¬´–ù–æ–≤—ã–µ –≤—ã–ø—É—Å–∫–∏¬ª).")

@dp.message()
async def handle_code(message: types.Message) -> None:
    if not message.text:
        return
    txt = message.text.strip()
    if not txt or txt.startswith("/"):
        return
    code = txt.lower()
    valid_codes = [c.lower() for c in config.VALID_CODES]
    if code not in valid_codes:
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    entry_number, is_new, pcode = await db.register_entry(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        code=code,
        part_len=PART_LEN,
        alphabet=ALPHABET,
    )
    if is_new:
        await message.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –¢–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID: `{pcode}`\n–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{entry_number} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ —Ç–æ–±–æ–π –∫–∞–∫ ‚Ññ{entry_number}.\n–¢–≤–æ–π ID: `{pcode}`",
            parse_mode="Markdown"
        )

# ---------- –ó–ê–ü–£–°–ö: WEBHOOK –∏–ª–∏ POLLING ----------
async def _on_startup(app: web.Application):
    await db.init()           # <‚Äî –í–ê–ñ–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Postgres
    await set_bot_commands()
    if WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
    else:
        logger.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±—É–¥–µ—Ç POLLING –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.")

async def _on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook()
        logger.info("Webhook —Å–Ω—è—Ç.")
    except Exception:
        pass

def create_app() -> web.Application:
    app = web.Application()

    async def health(_): return web.Response(text="ok")
    app.router.add_get("/health", health)

    # –Ø–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    async def telegram_webhook(request: web.Request) -> web.Response:
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
            return web.Response(status=403, text="forbidden")
        try:
            data = await request.json()
        except Exception:
            return web.Response(status=400, text="bad json")

        try:
            await db.init()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            update = types.Update.model_validate(data)
            await dp.feed_update(bot, update)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: %s", e)
            return web.Response(text="ok")

        return web.Response(text="ok")

    app.router.add_post(WEBHOOK_PATH, telegram_webhook)

    setup_application(app, dp, bot=bot, on_startup=[_on_startup], on_shutdown=[_on_shutdown])
    return app

async def _run_polling():
    await db.init()
    await set_bot_commands()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling). –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if WEBHOOK_URL:
        logger.info("–°—Ç–∞—Ä—Ç WEBHOOK –Ω–∞ –ø–æ—Ä—Ç—É %s", PORT)
        web.run_app(create_app(), host="0.0.0.0", port=PORT)
    else:
        try:
            asyncio.run(_run_polling())
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
