"""
–ë–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
"""

import os
import asyncio
import csv
import datetime
import logging
import random
import secrets
from io import StringIO
from collections import defaultdict

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BotCommand, BufferedInputFile

from aiohttp import web
# –í–ê–ñ–ù–û: SimpleRequestHandler –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
from aiogram.webhook.aiohttp_server import setup_application

import aiosqlite
import config

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
logger = logging.getLogger(__name__)

# ---------- –ë–û–¢/DP ----------
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# ---------- –ö–û–ù–§–ò–ì/–ë–î ----------
DB_NAME = getattr(config, "DB_NAME", os.getenv("DB_NAME", "participants.db"))
PART_LEN = config.PARTICIPANT_CODE_LEN
ALPHABET = config.PARTICIPANT_CODE_ALPHABET

# ---------- –£–¢–ò–õ–´ ----------
def make_participant_code() -> str:
    return "".join(secrets.choice(ALPHABET) for _ in range(PART_LEN))

def is_admin(user_id: int) -> bool:
    return user_id in set(getattr(config, "ADMIN_IDS", []) or [])

# ---------- –ò–ù–ò–¢ –ë–î + –ú–ò–ì–†–ê–¶–ò–ò ----------
async def init_db() -> None:
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                participant_code TEXT UNIQUE NOT NULL
            );
            """
        )
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS entries (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                code TEXT NOT NULL,
                entry_number INTEGER NOT NULL,
                created_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            );
            """
        )
        await db.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_entries_user_code ON entries(user_id, code);")
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")

# ---------- –ö–û–ú–ê–ù–î–´ –ú–ï–ù–Æ ----------
async def set_bot_commands() -> None:
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
        BotCommand(command="my", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã"),
        BotCommand(command="export", description="–í—ã–≥—Ä—É–∑–∏—Ç—å CSV (–∞–¥–º–∏–Ω)"),
        BotCommand(command="draw", description="–†–æ–∑—ã–≥—Ä—ã—à (–∞–¥–º–∏–Ω)"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(commands)

# ---------- –õ–û–ì–ò–ö–ê ----------
async def ensure_user(db, user_id: int, username: str | None, first_name: str | None) -> str:
    cur = await db.execute("SELECT participant_code FROM users WHERE user_id = ?", (user_id,))
    row = await cur.fetchone()
    if row:
        await db.execute(
            "UPDATE users SET username = ?, first_name = ? WHERE user_id = ?",
            (username or "", first_name or "", user_id),
        )
        return row[0]
    while True:
        pc = make_participant_code()
        cur2 = await db.execute("SELECT 1 FROM users WHERE participant_code = ?", (pc,))
        if not await cur2.fetchone():
            break
    await db.execute(
        "INSERT INTO users (user_id, username, first_name, participant_code) VALUES (?, ?, ?, ?)",
        (user_id, username or "", first_name or "", pc),
    )
    return pc

async def register_entry(user_id: int, username: str | None, first_name: str | None, code: str) -> tuple[int, bool, str]:
    async with aiosqlite.connect(DB_NAME) as db:
        participant_code = await ensure_user(db, user_id, username, first_name)

        cur = await db.execute("SELECT entry_number FROM entries WHERE user_id = ? AND code = ?", (user_id, code))
        row = await cur.fetchone()
        if row:
            await db.commit()
            return row[0], False, participant_code

        cur = await db.execute("SELECT MAX(entry_number) FROM entries")
        max_number = (await cur.fetchone())[0] or 0
        new_number = max_number + 1

        created_at = datetime.datetime.now().isoformat()
        await db.execute(
            "INSERT INTO entries (user_id, username, first_name, code, entry_number, created_at) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", code, new_number, created_at),
        )
        await db.commit()
        return new_number, True, participant_code

async def get_user_entries(user_id: int) -> tuple[str, list[tuple[str,int]]]:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT participant_code FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        participant_code = row[0] if row else "‚Äî"
        cur = await db.execute(
            "SELECT code, entry_number FROM entries WHERE user_id = ? ORDER BY created_at", (user_id,)
        )
        rows = await cur.fetchall()
    return participant_code, [(r[0], r[1]) for r in rows]

async def export_csv() -> bytes:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT e.user_id, e.username, e.code, e.entry_number FROM entries e ORDER BY e.id"
        )
        rows = await cur.fetchall()
    buff = StringIO()
    writer = csv.writer(buff)
    writer.writerow(["user_id", "username", "code", "entry_number"])
    for r in rows:
        writer.writerow(r)
    return buff.getvalue().encode("utf-8")

async def draw_weighted_winner() -> dict | None:
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute(
            "SELECT u.user_id, u.username, u.first_name, u.participant_code, COUNT(DISTINCT e.code) AS codes_count "
            "FROM users u LEFT JOIN entries e ON e.user_id = u.user_id "
            "GROUP BY u.user_id, u.username, u.first_name, u.participant_code"
        )
        users = await cur.fetchall()
        cur = await db.execute("SELECT user_id, code FROM entries")
        code_rows = await cur.fetchall()

    if not users:
        return None

    codes_by_user = defaultdict(list)
    for uid, code in code_rows:
        codes_by_user[uid].append(code)

    pool = []
    for uid, username, first_name, pcode, ccount in users:
        tickets = int(ccount or 0)
        if tickets <= 0:
            continue
        pool.append({
            "user_id": uid,
            "username": username or "",
            "first_name": first_name or "",
            "participant_code": pcode,
            "codes_count": tickets,
            "codes": codes_by_user.get(uid, []),
        })

    if not pool:
        return None

    weights = [p["codes_count"] for p in pool]
    total = sum(weights)
    r = random.uniform(0, total)
    upto = 0
    for p, w in zip(pool, weights):
        if upto + w >= r:
            p["tickets"] = w
            return p
        upto += w
    choice = random.choice(pool)
    choice["tickets"] = choice["codes_count"]
    return choice

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    async with aiosqlite.connect(DB_NAME) as db:
        pcode = await ensure_user(db, message.from_user.id, message.from_user.username, message.from_user.first_name)
        await db.commit()
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–¥—Ä—É–≥'} üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–¥–æ 3), —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø—Ä–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n\n"
        f"–¢–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: `{pcode}`\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã: /my"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("my"))
async def cmd_my(message: types.Message) -> None:
    pcode, entries = await get_user_entries(message.from_user.id)
    if not entries:
        await message.answer(f"–¢–≤–æ–π ID: `{pcode}`\n–¢—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞.", parse_mode="Markdown")
        return
    lines = [f"–¢–≤–æ–π ID: `{pcode}`", "–¢–≤–æ–∏ –∫–æ–¥—ã:"]
    for code, number in entries:
        lines.append(f"‚Ññ{number} ‚Äî {code}")
    await message.answer("\n".join(lines), parse_mode="Markdown")

@dp.message(Command("export"))
async def cmd_export(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    csv_bytes = await export_csv()
    file = BufferedInputFile(csv_bytes, filename="participants.csv")
    await message.answer_document(file, caption="CSV —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

@dp.message(Command("draw"))
async def cmd_draw(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    winner = await draw_weighted_winner()
    if not winner:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return

    uname = f"@{winner['username']}" if winner["username"] else f"user_id={winner['user_id']}"
    codes_list = ", ".join(winner["codes"]) if winner["codes"] else "‚Äî"
    text = (
        "üéâ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞!*\n"
        f"–ò–≥—Ä–æ–∫: *{winner['first_name']}* ({uname})\n"
        f"ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: `{winner['participant_code']}`\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: *{winner['codes_count']}* (–≤–µ—Å –≤ –∂–µ—Ä–µ–±—å—ë–≤–∫–µ)\n"
        f"–ö–æ–¥—ã: {codes_list}"
    )
    await message.answer(text, parse_mode="Markdown")

    if getattr(config, "GROUP_CHAT_ID", None):
        try:
            await bot.send_message(config.GROUP_CHAT_ID, text, parse_mode="Markdown")
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ –≥—Ä—É–ø–ø—É: %s", e)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT COUNT(*) FROM entries")
        total_entries = (await cur.fetchone())[0]
        cur = await db.execute("SELECT COUNT(DISTINCT user_id) FROM entries")
        unique_users = (await cur.fetchone())[0]
        cur = await db.execute("SELECT COUNT(DISTINCT code) FROM entries")
        unique_codes = (await cur.fetchone())[0]
    text = (
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_entries}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {unique_codes}"
    )
    await message.answer(text)

@dp.message()
async def handle_code(message: types.Message) -> None:
    if not message.text:
        return
    txt = message.text.strip()
    if not txt or txt.startswith("/"):
        return
    code = txt.lower()
    valid_codes = [c.lower() for c in config.VALID_CODES]
    if code not in valid_codes:
        await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    entry_number, is_new, pcode = await register_entry(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        code=code,
    )
    if is_new:
        await message.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –¢–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID: `{pcode}`\n–¢—ã —É—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ{entry_number} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ —Ç–æ–±–æ–π –∫–∞–∫ ‚Ññ{entry_number}.\n–¢–≤–æ–π ID: `{pcode}`",
            parse_mode="Markdown"
        )

# ---------- –ó–ê–ü–£–°–ö: WEBHOOK –∏–ª–∏ POLLING ----------
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://<app>.onrender.com/webhook
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change-me")
PORT = int(os.getenv("PORT", "10000"))

async def _on_startup(app: web.Application):
    await init_db()
    await set_bot_commands()
    if WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
    else:
        logger.info("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±—É–¥–µ—Ç POLLING –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.")

async def _on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook()
        logger.info("Webhook —Å–Ω—è—Ç.")
    except Exception:
        pass

def create_app() -> web.Application:
    app = web.Application()

    # healthcheck
    async def health(_):
        return web.Response(text="ok")
    app.router.add_get("/health", health)

    # –Ø–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    async def telegram_webhook(request: web.Request) -> web.Response:
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
            return web.Response(status=403, text="forbidden")
        try:
            data = await request.json()
        except Exception:
            return web.Response(status=400, text="bad json")

        try:
            update = types.Update.model_validate(data)
            await dp.feed_update(bot, update)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: %s", e)
            return web.Response(text="ok")

        return web.Response(text="ok")

    app.router.add_post(WEBHOOK_PATH, telegram_webhook)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    setup_application(app, dp, bot=bot, on_startup=[_on_startup], on_shutdown=[_on_shutdown])
    return app

async def _run_polling():
    await init_db()
    await set_bot_commands()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling). –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    if WEBHOOK_URL:
        logger.info("–°—Ç–∞—Ä—Ç WEBHOOK –Ω–∞ –ø–æ—Ä—Ç—É %s", PORT)
        web.run_app(create_app(), host="0.0.0.0", port=PORT)
    else:
        try:
            asyncio.run(_run_polling())
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
